SPRING_BOOT
@RestController
public class DataController {

    @Autowired
    private DataRepository dataRepository;

    @PostMapping("/send-data-to-flask")
    public void sendDataToFlask() throws IOException {
        // MySQL 데이터 조회
        List<Data> dataList = dataRepository.findAll();

        // 데이터 전달을 위한 HTTP 요청 생성
        URL url = new URL("http://flask-app/api/data");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("POST");
        connection.setRequestProperty("Content-Type", "application/json");
        connection.setDoOutput(true);

        // 데이터를 JSON 형식으로 직렬화하여 전송
        ObjectMapper objectMapper = new ObjectMapper();
        String jsonData = objectMapper.writeValueAsString(dataList);

        OutputStream outputStream = connection.getOutputStream();
        outputStream.write(jsonData.getBytes());
        outputStream.flush();
        outputStream.close();

        // 응답 처리
        int responseCode = connection.getResponseCode();
        if (responseCode == HttpURLConnection.HTTP_OK) {
            System.out.println("Data sent to Flask successfully.");
        } else {
            System.out.println("Failed to send data to Flask. Response Code: " + responseCode);
        }
    }
}

FLASK
from flask import Flask, request
import requests

app = Flask(__name__)

@app.route('/api/data', methods=['POST'])
def receive_data_from_springboot():
    # 전달된 데이터 받기
    data = request.get_json()

    # 데이터 분석 로직 수행
    analyzed_data = analyze_data(data)

    # 분석 결과를 다시 스프링 부트로 전달
    springboot_url = 'http://springboot-app/send-analyzed-data'
    response = requests.post(springboot_url, json=analyzed_data)

    if response.status_code == 200:
        return 'Analyzed data sent to Spring Boot successfully.'
    else:
        return 'Failed to send analyzed data to Spring Boot.'

def analyze_data(data):
    # 데이터 분석 로직 수행
    # ...

    # 분석 결과 반환
    return analyzed_data

if __name__ == '__main__':
    app.run()

